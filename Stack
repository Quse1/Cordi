Стек — это структура данных, работающая по принципу "последним пришел — первым вышел" (LIFO). Основные операции, выполняемые со стеком, включают push, pop, peek, isEmpty и isFull. Давайте рассмотрим каждую из этих функций более подробно.
1. push(element)
Описание: Эта функция добавляет элемент на вершину стека.
Принцип работы:
Проверяет, не заполнен ли стек (если есть ограничение по размеру).
Если стек не заполнен, элемент добавляется в массив или список, представляющий стек, и указатель на вершину стека обновляется.
Если стек переполнен, функция может вернуть ошибку или сообщение о переполнении.
Пример реализации на Go:
func (s *Stack) Push(element int) error {
    if s.IsFull() {
        return fmt.Errorf("stack is full")
    }
    s.items = append(s.items, element) // Добавляем элемент
    return nil
}
2. pop()
Описание: Эта функция удаляет и возвращает элемент с вершины стека.
Принцип работы:
Проверяет, пуст ли стек.
Если стек не пуст, удаляет элемент с вершины и возвращает его.
Если стек пуст, функция может вернуть ошибку или сообщение о пустом стеке.
Пример реализации на Go:
func (s *Stack) Pop() (int, error) {
    if s.IsEmpty() {
        return 0, fmt.Errorf("stack is empty")
    }
    topIndex := len(s.items) - 1
    item := s.items[topIndex] // Получаем верхний элемент
    s.items = s.items[:topIndex] // Удаляем его
    return item, nil
}
3. peek()
Описание: Эта функция возвращает элемент на вершине стека, не удаляя его.
Принцип работы:
Проверяет, пуст ли стек.
Если стек не пуст, возвращает элемент с вершины.
Если стек пуст, функция может вернуть ошибку или сообщение о пустом стеке.
Пример реализации на Go:
func (s *Stack) Peek() (int, error) {
    if s.IsEmpty() {
        return 0, fmt.Errorf("stack is empty")
    }
    return s.items[len(s.items)-1], nil // Возвращаем верхний элемент
}
4. isEmpty()
Описание: Эта функция проверяет, пуст ли стек.
Принцип работы:
Возвращает true, если стек не содержит элементов, и false в противном случае.
Пример реализации на Go:
func (s *Stack) IsEmpty() bool {
    return len(s.items) == 0
}
5. isFull()
Описание: Эта функция проверяет, заполнен ли стек (если есть ограничение по размеру).
Принцип работы:
Возвращает true, если количество элементов в стеке достигло максимального размера, и false в противном случае.
Пример реализации на Go:
func (s *Stack) IsFull() bool {
    return len(s.items) >= s.capacity // capacity - максимальный размер стека
}
Заключение
Стек — это простая, но мощная структура данных, которая находит применение в различных алгоритмах и задачах, таких как обработка выражений, управление вызовами функций и реализация отмены действий. 
Понимание принципов работы операций push, pop, peek, isEmpty и isFull поможет вам эффективно использовать стек в своих приложениях.

